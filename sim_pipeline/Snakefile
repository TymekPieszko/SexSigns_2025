import numpy as np
configfile: "config.yaml"

# Install environments with Mamba
# module load Mamba/4.14.0-0

# Choose a model to run
model = "MP" # MP or CF

### The pipeline consists of the following steps:
# Run simulations (rule simulate).
# Subsample the simulated genealogies to 2 target individuals (+ output other files for downstream processing); use pyslim for recapitation and msprime to overlay mutations (rule subsample).
# Reconstruct ARGs for the target 2 individuals with SINGER (rule SINGER). 
# Reconstruct genome-wide trees for the target 2 individuals with IQ-TREE (rules IQ_TREE + root_prune). 


model = "CF" # Out of MP, CF and TF
# Get params from config
L = config["L"]
N = config["N"]
TRACT = config["TRACT"]
REC_lst = config["REC_lst"][model]
SEX_lst = config["SEX_lst"]
BIAS_lst = config["BIAS_lst"]
GENS = config["GENS"]
REP = config["REP"] # one value
REP_lst = list(range(int(REP)))
# REP_lst = list(range(5))
MUT_lst = config["MUT_lst"]


simulate_targets = expand("sim_output/{model}/0.ts/SEX~{SEX}/REC~{REC}/{REP}.trees", model=model, SEX=SEX_lst, REC=REC_lst, REP=REP_lst)
subsample_targets = expand("sim_output/{model}/1.sub_ts/SEX~{SEX}/REC~{REC}/MUT~{MUT}/{REP}.trees", model=model, SEX=SEX_lst, REC=REC_lst, MUT=MUT_lst, REP=REP_lst)
# subsample_targets = expand("sim_output/{model}/2.2.fasta/SEX~{SEX}/REC~{REC}/MUT~{MUT}/{REP}/", model=model, SEX=SEX_lst, REC=REC_lst, MUT=MUT_lst, REP=REP_lst)
SINGER_targets = expand("sim_output/{model}/3.1.SINGER/SEX~{SEX}/REC~{REC}/MUT~{MUT}/BIAS~{BIAS}/{REP}/ts/", model=model, SEX=SEX_lst, REC=REC_lst, MUT=MUT_lst, BIAS=BIAS_lst, REP=REP_lst)
IQ_TREE_targets = expand("sim_output/{model}/3.2.IQ_TREE/SEX~{SEX}/REC~{REC}/MUT~{MUT}/{REP}/full/", model=model, SEX=SEX_lst, REC=REC_lst, MUT=MUT_lst, REP=REP_lst)
root_prune_targets = expand("sim_output/{model}/3.2.IQ_TREE/SEX~{SEX}/REC~{REC}/MUT~{MUT}/{REP}/sub/", model=model, SEX=SEX_lst, REC=REC_lst, MUT=MUT_lst, REP=REP_lst)

rule all:
    input:
        simulate_targets,
        subsample_targets,
        SINGER_targets,
        IQ_TREE_targets,
        root_prune_targets

rule simulate:
    output:
        "sim_output/{model}/0.ts/SEX~{SEX}/REC~{REC}/{REP}.trees"
    conda:
        "envs/slim.yaml"
    params:
        model = model,
        L = L,
        N = N,
        TRACT = TRACT,
        GENS = GENS
    threads: 1
    resources:
        mem_mb=10000,
        runtime=10,
    group: "simulate"
    shell:
        "slim "
        "-d L={params.L} "
        "-d N={params.N} "
        "-d TRACT={params.TRACT} "
        "-d GENS={params.GENS} "
        "-d SEX={wildcards.SEX} "
        "-d REC={wildcards.REC} "
        "-d 'output=\"{output}\"' scripts/model_{params.model}.slim"

rule subsample:
    input:
        "sim_output/{model}/0.ts/SEX~{SEX}/REC~{REC}/{REP}.trees"
    output:
        "sim_output/{model}/1.sub_ts/SEX~{SEX}/REC~{REC}/MUT~{MUT}/{REP}.trees", # 2 target inds
        "sim_output/{model}/2.1.vcf/SEX~{SEX}/REC~{REC}/MUT~{MUT}/{REP}.vcf", # 2 target inds
        directory("sim_output/{model}/2.2.fasta/SEX~{SEX}/REC~{REC}/MUT~{MUT}/{REP}/") # Directory to store fasta files; 100 inds each (including 2 target inds)
        "sim_output/{model}/2.2.fasta/SEX~{SEX}/REC~{REC}/MUT~{MUT}/{REP}/samples.txt" # Indices of the 2 target inds in the fasta files
    conda:
        "envs/tskit.yaml"
    params:
        N_ANC = N, # For recapitation
        L = L, # To determine REC for recapitation; 1 / L = 1 crossover per chromosome
        WINDOW_LEN = TRACT, # For writing fastas of length TRACT
    threads: 1
    resources:
        mem_mb=5000,
        runtime=2,
    group: "subsample"
    script:
        "scripts/subsample_ts.py"


rule SINGER:
    input:
        ts = "sim_output/{model}/1.sub_ts/SEX~{SEX}/REC~{REC}/MUT~{MUT}/{REP}.trees",
        vcf = "sim_output/{model}/2.1.vcf/SEX~{SEX}/REC~{REC}/MUT~{MUT}/{REP}.vcf",
        # bias_dir = "sim_output/3.bias/SEX~{SEX}/REC~{REC}/MUT~{MUT}/BIAS~{BIAS}/{REP}/"
    output:
        # arg_dir = temp(directory("sim_output/{model}/3.1.SINGER/SEX~{SEX}/REC~{REC}/MUT~{MUT}/BIAS~{BIAS}/{REP}/arg_temp/")),
        ts_dir = directory("sim_output/{model}/3.1.SINGER/SEX~{SEX}/REC~{REC}/MUT~{MUT}/BIAS~{BIAS}/{REP}/ts/")
    log:
        arg_log = "sim_output/{model}/3.1.SINGER/SEX~{SEX}/REC~{REC}/MUT~{MUT}/BIAS~{BIAS}/{REP}/arg.log", 
        ts_log = "sim_output/{model}/3.1.SINGER/SEX~{SEX}/REC~{REC}/MUT~{MUT}/BIAS~{BIAS}/{REP}/ts.log"  
    conda:
        "envs/tskit.yaml"
    threads: 1
    params:
        L = L,
        WINDOW_LEN = TRACT,
    resources:
        mem_mb=10000, 
        runtime=60 
    group: "singer"
    script:
        "scripts/run_SINGER.py"

rule IQ_TREE:
    input:
        "sim_output/{model}/2.2.fasta/SEX~{SEX}/REC~{REC}/MUT~{MUT}/{REP}/",
    output:
        directory("sim_output/{model}/3.2.IQ_TREE/SEX~{SEX}/REC~{REC}/MUT~{MUT}/{REP}/full/",)
    conda:
        "envs/tskit.yaml"
    threads: 1
    resources:
        mem_mb=5000,
        runtime=40
        # runtime=10
    group: "iqtree"
    script:
        "scripts/run_IQ_TREE.py"

rule root_prune:
    input:
        "sim_output/{model}/2.2.fasta/SEX~{SEX}/REC~{REC}/MUT~{MUT}/{REP}/",
        "sim_output/{model}/3.2.IQ_TREE/SEX~{SEX}/REC~{REC}/MUT~{MUT}/{REP}/full/",
    output:
        directory("sim_output/{model}/3.2.IQ_TREE/SEX~{SEX}/REC~{REC}/MUT~{MUT}/{REP}/sub/")
    conda:
        "ape"
    threads: 1
    resources:
        mem_mb=5000,
        # runtime=int(600 / 25) # 10 hours
        runtime=2
    group: "rootprune"
    script:
        "scripts/root_prune.R"
