initialize()
{
	initializeSLiMModelType("nonWF");
	initializeTreeSeq();
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L - 1);
	initializeMutationRate(0);
	initializeRecombinationRate(1 / L);
	source("./scripts/functions.eidos");
}

// Individuals produce offspring according to fitness
reproduction()
{
	K = sim.getValue("N");
	fitness = p1.cachedFitness(NULL);
	parents1 = sample(p1.individuals, N, replace=T, weights=fitness);
	parents2 = sample(p1.individuals, N, replace=T, weights=fitness);
	for (i in seqLen(K))
	{
		mode = sample(c('ASEX', 'SEX'), 1, weights=c(1 - SEX, SEX)); // Draw the reproductive mode to produce an offspring according to the frequencies of asexuality and sex
		if (mode == 'ASEX')
		{
			parent = parents1[i];
			gen1 = parent.genome1;
			gen2 = parent.genome2;
			drawn_dict = draw_crossovers(r=REC, i_max=L - 1);
			breaks = drawn_dict.getValue('breaks');
			break_matrix = drawn_dict.getValue('break_matrix');
			break_matrix = resolve_crossovers(break_matrix);
			break_dict = subset_crossovers(breaks, break_matrix);
			breaks1 = break_dict.getValue('breaks1');
			breaks2 = break_dict.getValue('breaks2');
			breaks3 = break_dict.getValue('breaks3');
			breaks4 = break_dict.getValue('breaks4');
			assortment = sample(1:8, 1);
			if (assortment == 1)
			{
				subpop.addRecombinant(gen1, gen2, breaks1, gen2, gen1, breaks4);
			}
			else if (assortment == 2)
			{
				subpop.addRecombinant(gen1, gen2, breaks1, gen2, gen1, breaks3);
			}
			else if (assortment == 3)
			{
				subpop.addRecombinant(gen1, gen2, breaks2, gen2, gen1, breaks4);
			}
			else if (assortment == 4)
			{
				subpop.addRecombinant(gen1, gen2, breaks2, gen2, gen1, breaks3);
			}
			// Shuffle SLiM genomes between the locations; you want trees with different allele groupings to coexist in an asexual population
			else if (assortment == 5)
			{
				subpop.addRecombinant(gen2, gen1, breaks4, gen1, gen2, breaks1);
			}
			else if (assortment == 6)
			{
				subpop.addRecombinant(gen2, gen1, breaks3, gen1, gen2, breaks1);
			}
			else if (assortment == 7)
			{
				subpop.addRecombinant(gen2, gen1, breaks4, gen1, gen2, breaks2);
			}
			else if (assortment == 8)
			{
				subpop.addRecombinant(gen2, gen1, breaks3, gen1, gen2, breaks2);
			}
		}
		else if (mode == 'SEX')
		{
			parent1 = parents1[i];
			parent2 = parents2[i];
			subpop.addCrossed(parent1, parent2);
		}
	}
	self.active = 0;
}

1 early()
{
	sim.setValue("N", N);
	sim.addSubpop("p1", 1);
}

survival()
{
	// survival is independent of fitness; parents die, offspring live
	return (individual.age == 0);
}

GENS late()
{
	sim.treeSeqOutput(output);
}